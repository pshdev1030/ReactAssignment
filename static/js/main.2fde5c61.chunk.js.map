{"version":3,"sources":["common/useIInfinteScroll.js","Container/CountryContainer.js","State/commonstate.js","Component/CountryComponent.js","Component/CreateComponent.js","Component/SearchComponent.js","App.js","index.js"],"names":["useInfiniteScroll","root","target","onIntersect","threshold","rootMargin","useEffect","observer","IntersectionObserver","observe","disconnect","CountryEle","styled","div","CountryBtn","button","CountryText","CountryContainer","data","onClick","dataRef","map","ele","name","alpha2Code","capital","region","callingCodes","data-key","ref","initialState","loading","countries","error","isShow","search","searchCountries","LOADING_SUCCESS","LOADING_FAIL","ADD_COUNTRY","DELETE_COUNTRY","SEARCH_COUNTRY","isOverlap","input","dispatch","getState","some","loadingSuccessAction","type","loadingFailAction","searchCountriesAction","upperInput","toUpperCase","reduce","acc","includes","join","push","console","log","commonreducer","state","action","concat","Country","filter","key","CountryComponent","useSelector","useDispatch","useState","countrydata","num","setData","useRef","setInitialData","a","axios","get","response","infiniteCallback","length","prev","slice","e","dataset","toast","info","useInfinteScroll","current","isIntersecting","CountryBox","autoClose","CountryInfoInput","CountryInfoForm","form","CountrySubmitInput","CreateComponent","useForm","register","handleSubmit","reset","onSubmit","count","overlapTest","err","overlapCheck","placeholder","value","SearchComponent","timer","SearchForm","SearchInput","onChange","clearTimeout","setTimeout","SearchSubmit","GlobalStyle","App","store","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2fde5c61.chunk.js","sourcesContent":["import {useEffect} from 'react';\r\n\r\nconst useInfiniteScroll=({\r\n    root=null,\r\n    target,\r\n    onIntersect,\r\n    threshold=1,\r\n    rootMargin='0px',\r\n  })=>{\r\n    useEffect(()=>{\r\n      if(!target){\r\n        return;\r\n    }\r\n        const observer =new IntersectionObserver(onIntersect,{\r\n            root,\r\n            rootMargin,\r\n            threshold,\r\n        })\r\n\r\n        observer.observe(target);\r\n        return()=>{\r\n            observer.disconnect();\r\n        }\r\n    },[target,root,rootMargin,onIntersect,threshold]);\r\n  }\r\n\r\n  export default useInfiniteScroll;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CountryEle=styled.div`\r\ndisplay:flex;\r\nflex-basis:300px;\r\nflex-flow:column wrap; \r\nmargin: 20px 20px;\r\nalign-items:center;\r\njustify-content:center;\r\nborder:2px solid grey;\r\nborder-radius:10px;\r\n`;\r\n\r\nconst CountryBtn=styled.button`\r\npadding:10px;\r\nwidth: 80%;\r\nmargin-top:10px;\r\ncolor:white;\r\nbackground-color:skyblue;\r\nborder:none;\r\n`;\r\nconst CountryText=styled.div`\r\ntext-align:center\r\n`;\r\n\r\n\r\nexport default function CountryContainer({data,onClick,dataRef}){\r\n    return(\r\n        <>\r\n        {data.map(ele=>\r\n            <CountryEle key={ele.alpha2Code+ele.capital}>\r\n                <CountryText><strong>국가 이름 :</strong>{ele.name}</CountryText>\r\n                <CountryText><strong>국가 코드 :</strong>{ele.alpha2Code}</CountryText>\r\n                <CountryText><strong>수도 :</strong>{ele.capital}</CountryText>\r\n                <CountryText><strong>지역 :</strong>{ele.region}</CountryText>\r\n                <CountryText><strong>지역코드 :</strong>{ele.callingCodes}</CountryText>\r\n                <CountryBtn onClick={onClick} data-key={ele.alpha2Code+ele.capital}>삭제</CountryBtn>\r\n            </CountryEle>\r\n        )}\r\n        <div ref={dataRef}></div>\r\n        </>\r\n    );\r\n}","import axios from 'axios';\r\n\r\nconst initialState={\r\n    loading:true,\r\n    countries:[],\r\n    error:false,\r\n    isShow:false,\r\n    search:'',\r\n    searchCountries:[],\r\n}\r\nconst LOADING_SUCCESS=\"COUNTRY/LOADING_SUCCESS\";\r\nconst LOADING_FAIL=\"COUNTRY/LOADING_FAIL\";\r\nconst ADD_COUNTRY=\"COUNTRY/ADD\";\r\nconst DELETE_COUNTRY=\"COUNTRY/DELETE\";\r\nconst SEARCH_COUNTRY=\"COUNTRY/SEARCH\";\r\n/*\r\nconst SORT_BY_COUNTRYNAME=\"COUNTRY/SORT_BY_COUNTRYNAME\";\r\nconst SORT_BY_CODE=\"COUNTRY/SORT_BY_CODE\";\r\nconst SORT_BY_CAPITAL=\"COUNTRY/SORT_BY_CAPITAL\";\r\nconst SORT_BY_NAME=\"COUNTRY/SORT_BY_NAME\";\r\nconst SORT_BY_TEL=\"COUNTRY/SORT_BY_TEL\";\r\n*/\r\n\r\nexport const getData=()=>async dispatch=>{\r\n    try{\r\n    const response = await axios.get(\"https://restcountries.eu/rest/v2/all?fields=alpha2Code;capital;name;region;callingCodes\");\r\n    dispatch(loadingSuccessAction(response.data));\r\n    }\r\n    catch(error){\r\n    dispatch(loadingFailAction(error));\r\n    }\r\n};\r\n\r\nexport const isOverlap=(input,name)=>(dispatch,getState)=>{\r\n    return getState().countries.some(ele=>ele[name]===input[name]);\r\n}\r\n\r\nexport const loadingSuccessAction=(data)=>({\r\n    type:LOADING_SUCCESS,\r\n    data,\r\n})\r\n\r\nexport const loadingFailAction=(error)=>({\r\n    type:LOADING_FAIL,\r\n    error,\r\n})\r\n\r\nexport const addCountryAction=(Country)=>({\r\n    type:ADD_COUNTRY,\r\n    Country,\r\n});\r\n\r\nexport const deleteCountryAction=(key)=>({\r\n    type:DELETE_COUNTRY,\r\n    key,\r\n})\r\n\r\nexport const searchCountriesAction=(input)=>(dispatch,getState)=>{\r\n        if(input===''){\r\n            dispatch({\r\n                type:SEARCH_COUNTRY,\r\n                input,\r\n                countries:[],\r\n            })\r\n        }\r\n        else{\r\n            const countries=getState().countries;\r\n            const upperInput=input.toUpperCase();\r\n            const data =countries.reduce((acc,ele)=>{\r\n            if(ele.alpha2Code.toUpperCase().includes(upperInput)\r\n            ||ele.callingCodes.join(\"\").includes(upperInput)\r\n            ||ele.capital.toUpperCase().includes(upperInput)\r\n            ||ele.name.toUpperCase().includes(upperInput)\r\n            ||ele.region.toUpperCase().includes(upperInput)){\r\n               acc.push(ele);\r\n            }\r\n            return acc;\r\n        },[])\r\n        console.log(data);\r\n            dispatch({\r\n                type:SEARCH_COUNTRY,\r\n                input,\r\n                countries:data,\r\n            })\r\n        }\r\n}\r\n\r\nconst commonreducer=(state=initialState,action)=>{\r\n    switch(action.type){\r\n        case LOADING_SUCCESS:{\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                countries:action.data,\r\n                error:false,\r\n            }\r\n        }\r\n        case LOADING_FAIL:\r\n            return{\r\n                ...state,\r\n                loading:false,\r\n                countries:null,\r\n                error:action.error,\r\n            };\r\n        case ADD_COUNTRY:\r\n            return{\r\n                ...state,\r\n                countries:state.countries.concat(action.Country),\r\n            };\r\n        case DELETE_COUNTRY:\r\n            return{\r\n                ...state,\r\n                countries:state.countries.filter(ele=>(ele.alpha2Code+ele.capital)!==action.key),\r\n            }\r\n        case SEARCH_COUNTRY:\r\n            return {\r\n                ...state,\r\n                searchCountries:action.countries,\r\n                search:action.input,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default commonreducer;\r\n\r\n/*객체 순회 for... in 배열===객체 배열은 객체중에 특이한 객체(고차함수 정의한)\r\nhttps://velog.io/@lilyoh/js-object-%EC%9A%94%EC%86%8C%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B3%A0-%EC%88%9C%ED%9A%8C%ED%95%98%EA%B8%B0\r\n문자열 합치기\r\nhttps://hianna.tistory.com/381\r\nconcat보다+사용\r\n객체배열 내부 정렬(다를게 없다..)\r\nhttp://yoonbumtae.com/?p=1237\r\n이터레이터공부\r\nArray.some =배열안의 요소가 판별함수를 통과하는지를 반환\r\nhttps://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/some\r\nfor in을 객체에서 쓰면 propertyname을 반한\r\nhttps://webclub.tistory.com/568\r\n문자열 패턴 확인 \r\nhttps://codechacha.com/ko/java-string-matches/*/","import React, { useEffect, useRef,useState } from 'react';\r\nimport {useDispatch, useSelector } from 'react-redux';\r\nimport useInfinteScroll from '../common/useIInfinteScroll';\r\nimport CountryContainer from '../Container/CountryContainer';\r\nimport {deleteCountryAction, getData} from '../State/commonstate';\r\nimport styled from 'styled-components';\r\nimport { toast,ToastContainer } from 'react-toastify';\r\n\r\n\r\nexport default function CountryComponent(){\r\n  const loading=useSelector(state=>state.loading);\r\n  const countries=useSelector(state=>state.countries);\r\n  const error=useSelector(state=>state.error);\r\n  const searchCountries=useSelector(state=>state.searchCountries);\r\n  const search=useSelector(state=>state.search);\r\n  console.log(searchCountries);\r\n\r\n  const dispatch=useDispatch();\r\n  const [data,setData]=useState({\r\n    countrydata:[],\r\n    num:0,\r\n  });\r\n  const {countrydata,num}=data;\r\n  \r\n  const dataRef=useRef(null);\r\n\r\n  const setInitialData=async()=>{\r\n    await dispatch(getData());\r\n    infiniteCallback();\r\n  }\r\n\r\n  const infiniteCallback=()=>{\r\n    if(num+30>=countries.length){\r\n      setData(prev=>({\r\n        countrydata:countries,\r\n        num:countries.length,\r\n      }))\r\n    }\r\n    else{\r\n      setData(prev=>({\r\n        countrydata:countries.slice(0,prev.num+30),\r\n        num:prev.num+30,\r\n      }))\r\n\r\n    }\r\n  }\r\n\r\n  const onClick=(e)=>{\r\n    dispatch(deleteCountryAction(e.target.dataset.key));\r\n    setData(prev=>({\r\n      countrydata:countrydata.filter(ele=>(ele.alpha2Code+ele.capital)!==e.target.dataset.key),\r\n      num:prev.num-1,\r\n    }))\r\n    toast.info(\"국가를 삭제하였습니다.\");\r\n  };\r\n\r\n\r\n  \r\n  /*getData from api setinfinityscroll */\r\n  useEffect(()=>{\r\n    setInitialData();\r\n  },[]);\r\n\r\n  useInfinteScroll({\r\n    target:dataRef.current,\r\n    threshold:1.0,\r\n    onIntersect:([{isIntersecting}])=>{\r\n      if(isIntersecting&&!loading&&num!==countries.length){\r\n        infiniteCallback();\r\n      }\r\n    }\r\n  })\r\n\r\n/*rendering*/\r\n  if(loading) return<div>Loading...</div>\r\n  if(error) return<div>Error</div>\r\n  if(!loading) return(\r\n      <CountryBox>\r\n        {search\r\n        ?<CountryContainer data={searchCountries} onClick={onClick} dataRef={dataRef}/>\r\n        :<CountryContainer data={countrydata} onClick={onClick} dataRef={dataRef}/>}\r\n\r\n      <ToastContainer autoClose=\"3000\"/>\r\n      </CountryBox>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst CountryBox=styled.div`\r\ndisplay:flex;\r\nflex-wrap:wrap;\r\nalign-items:center;\r\njustify-content:center;\r\nheight:60vh;\r\n`;\r\n//Thunk 할거면 dispatch로 함수를 보내야 thunk미들웨어에서 함수면 실행 액션이면 dispatch를 한다.\r\n//얕은복사 잘 피하기\r\n//useSelcetor 리랜더링 https://velog.io/@lllen/react-Redux%EC%9D%98-useSelector-%EC%B5%9C%EC%A0%81%ED%99%94","import React from 'react';\r\nimport {useForm} from 'react-hook-form';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addCountryAction, isOverlap} from '../State/commonstate';\r\nimport styled from 'styled-components';\r\nimport {toast} from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction CreateComponent(){\r\n    const {register,handleSubmit,reset}=useForm();\r\n    const dispatch=useDispatch();\r\n\r\n    const onSubmit=(input)=>{\r\n        let count=0;\r\n        for(const key in input){\r\n            const value=input[key];\r\n            if(value===\"\"){\r\n                count++;\r\n            }\r\n        }\r\n        if(count!==0){\r\n            toast.error(\"모든 값을 입력해야 합니다.\");\r\n            return;\r\n        }\r\n        const overlapTest=[\r\n            {err:dispatch(isOverlap(input,\"name\")),type:'이름'},\r\n            {err:dispatch(isOverlap(input,\"alpha2Code\")),type:'국가 코드'},\r\n        ]\r\n\r\n        const overlapCheck=overlapTest.filter(({err})=>err===true)\r\n\r\n        if(overlapCheck.length===overlapTest.length){\r\n            toast.error('이름과 국가코드이(가) 중복인 나라가 존재합니다.');\r\n            return;\r\n        }\r\n        if(overlapCheck.length>0){\r\n            console.log(overlapCheck);\r\n            toast.error(`${overlapCheck[0].type}이(가) 중복인 나라가 존재합니다.`);\r\n            return;\r\n        }\r\n            dispatch(addCountryAction(input));\r\n            reset();\r\n        }\r\n        \r\n    return(\r\n    <CountryInfoForm onSubmit={handleSubmit(onSubmit)}>\r\n   {/* register your input into the hook by invoking the \"register\" function */}\r\n      <CountryInfoInput name=\"name\" placeholder=\"이름(Name)\"ref={register()} />\r\n      {/* include validation with required or other standard HTML validation rules */}\r\n      <CountryInfoInput name=\"alpha2Code\" placeholder=\"국가코드(Alpha2Code)\" ref={register()}/>\r\n      <CountryInfoInput name=\"capital\" placeholder=\"수도(Capital)\" ref={register()}/>\r\n      <CountryInfoInput name=\"region\" placeholder=\"지역(Region)\"ref={register()}/>\r\n      <CountryInfoInput name=\"callingCodes\" placeholder=\"지역코드(CallingCodes)\" ref={register()}/>\r\n      <CountrySubmitInput type=\"submit\" value=\"제출하기\"/>\r\n    </CountryInfoForm>\r\n    );\r\n}\r\n\r\nconst CountryInfoInput=styled.input`\r\npadding:8px;\r\nmargin:8px;\r\nborder:2px solid grey;\r\nborder-radius:10px;\r\n`;\r\n\r\nconst CountryInfoForm=styled.form`\r\nmargin-bottom:3vh;\r\n`;\r\n\r\nconst CountrySubmitInput=styled.input`\r\npadding:8px;\r\nmargin:8px;\r\nborder:none;\r\n`;\r\n\r\nexport default CreateComponent;\r\n\r\n//handleSubmit(onSubmit) onSubmit을 submit이벤트로 다룬다.","import React,{useRef} from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch} from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { searchCountriesAction } from '../State/commonstate';\r\n\r\nexport default function SearchComponent(){\r\n    const dispatch=useDispatch();\r\n    const {register,handleSubmit}=useForm();\r\n    const timer=useRef(null);\r\n\r\n    const onSubmit=(e)=>{\r\n        dispatch(searchCountriesAction(e.input));\r\n    }\r\n\r\n\r\n    const onChange=(e)=>{\r\n        if(timer.current){\r\n            clearTimeout(timer.current);\r\n        }\r\n        timer.current=setTimeout(()=>{\r\n            dispatch(searchCountriesAction(e.target.value));\r\n        },500)\r\n    }\r\n\r\n    return(\r\n        <SearchForm onSubmit={handleSubmit(onSubmit)}>\r\n            <SearchInput name=\"input\" ref={register()} onChange={onChange}/>\r\n            <SearchSubmit type=\"submit\"/>\r\n        </SearchForm>\r\n    );\r\n}\r\n\r\n\r\nconst SearchInput=styled.input`\r\n`;\r\n\r\nconst SearchForm=styled.form`\r\ndisplay:flex;\r\n`;\r\n\r\nconst SearchSubmit=styled.input`\r\n`","import React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport styled from 'styled-components';\nimport CountryComponent from './Component/CountryComponent';\nimport CreateComponent from './Component/CreateComponent';\nimport SearchComponent from './Component/SearchComponent';\n\nfunction App() {\nreturn(\n  <GlobalStyle>\n    <SearchComponent/>\n    <CreateComponent/>\n    <CountryComponent/>\n  <ToastContainer autoClose=\"3000\"/>\n  </GlobalStyle>\n);\n}\n\nconst GlobalStyle=styled.div`\ndisplay:flex;\nflex-flow:column;\nalign-items:center;\njustify-content:center;\nwidth:85vw;\n`;\nconst GlobalStyle2=styled.div`\n\n`\n\nexport default App;\n\n\n/*함수를 의존배열에 넣으면 랜더링될떄마다 새함수 생성해서 무한루프\nReact.memo사용법\nhttps://react.vlpt.us/basic/19-React.memo.html\nReact.useCallback\nhttps://react.vlpt.us/basic/18-useCallback.html\nfetch\n\nreact-hook-form\nreact-toastify\naxios*/\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport {createStore,applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport commonreducer from './State/commonstate';\nimport ReduxThunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\n\n\nconst store=createStore(\n  commonreducer,\n  composeWithDevTools(applyMiddleware(ReduxThunk)),\n  );\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}